// Swift File generated by the BNF Converter (bnfc 2.9.6).

import Foundation
import Antlr4

enum BuildError: Error {
  case UnexpectedParseContext(String)
}

func buildDoubleToken(_ ctx: Token) throws -> DoubleToken {
  return DoubleToken(Double(ctx.getText()!)!)
}

func buildIntegerToken(_ ctx: Token) throws -> IntegerToken {
  return IntegerToken(Int(ctx.getText()!)!)
}

func buildStellaIdentToken(_ ctx: Token) throws -> StellaIdentToken {
  return StellaIdentToken(ctx.getText()!)
}

func buildExtensionNameToken(_ ctx: Token) throws -> ExtensionNameToken {
  return ExtensionNameToken(ctx.getText()!)
}

func buildMemoryAddressToken(_ ctx: Token) throws -> MemoryAddressToken {
  return MemoryAddressToken(ctx.getText()!)
}

func buildProgram(_ ctx: StellaParser.ProgramContext) throws -> Program {
  switch ctx {
    case let ctx as StellaParser.AProgramContext:
      let languagedecl = try buildLanguageDecl(ctx.p_1_1)
      let listextension = try buildExtensionList(ctx.p_1_2)
      let listdecl = try buildDeclList(ctx.p_1_3)
      return .aProgram(languagedecl, listextension, listdecl)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ProgramContext")
  }
}

func buildStellaIdentTokenList(_ ctx: StellaParser.ListStellaIdentContext) throws -> [StellaIdentToken] {
  switch ctx {
    case let ctx as StellaParser.ListStellaIdent_EmptyContext:
      return []
    case let ctx as StellaParser.ListStellaIdent_AppendLastContext:
      let data = try buildStellaIdentToken(ctx.p_2_1)
    return [data]
    case let ctx as StellaParser.ListStellaIdent_PrependFirstContext:
      let value1 = try buildStellaIdentToken(ctx.p_3_1)
      let value2 = try buildStellaIdentTokenList(ctx.p_3_3)
      return [value1] + value2
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListStellaIdentContext")
  }
}

func buildLanguageDecl(_ ctx: StellaParser.LanguageDeclContext) throws -> LanguageDecl {
  switch ctx {
    case let ctx as StellaParser.LanguageCoreContext:
      return .languageCore
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of LanguageDeclContext")
  }
}

func buildExtension(_ ctx: StellaParser.ExtensionContext) throws -> Extension_ {
  switch ctx {
    case let ctx as StellaParser.AnExtensionContext:
      let listextensionname = try buildExtensionNameTokenList(ctx.p_1_3)
      return .anExtension(listextensionname)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ExtensionContext")
  }
}

func buildExtensionNameTokenList(_ ctx: StellaParser.ListExtensionNameContext) throws -> [ExtensionNameToken] {
  switch ctx {
    case let ctx as StellaParser.ListExtensionName_EmptyContext:
      return []
    case let ctx as StellaParser.ListExtensionName_AppendLastContext:
      let data = try buildExtensionNameToken(ctx.p_2_1)
    return [data]
    case let ctx as StellaParser.ListExtensionName_PrependFirstContext:
      let value1 = try buildExtensionNameToken(ctx.p_3_1)
      let value2 = try buildExtensionNameTokenList(ctx.p_3_3)
      return [value1] + value2
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListExtensionNameContext")
  }
}

func buildExtensionList(_ ctx: StellaParser.ListExtensionContext) throws -> [Extension_] {
  switch ctx {
    case let ctx as StellaParser.ListExtension_EmptyContext:
      return []
    case let ctx as StellaParser.ListExtension_PrependFirstContext:
      let value1 = try buildExtensionList(ctx.p_2_1)
      let value2 = try buildExtension(ctx.p_2_2)
      return value1 + [value2]
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListExtensionContext")
  }
}

func buildDecl(_ ctx: StellaParser.DeclContext) throws -> Decl {
  switch ctx {
    case let ctx as StellaParser.DeclFunContext:
      let listannotation = try buildAnnotationList(ctx.p_1_1)
      let stellaident = try buildStellaIdentToken(ctx.p_1_3)
      let listparamdecl = try buildParamDeclList(ctx.p_1_5)
      let returntype = try buildReturnType(ctx.p_1_7)
      let throwtype = try buildThrowType(ctx.p_1_8)
      let listdecl = try buildDeclList(ctx.p_1_10)
      let expr = try buildExpr(ctx.p_1_12)
      return .declFun(listannotation, stellaident, listparamdecl, returntype, throwtype, listdecl, expr)
    case let ctx as StellaParser.DeclFunGenericContext:
      let listannotation = try buildAnnotationList(ctx.p_2_1)
      let stellaident = try buildStellaIdentToken(ctx.p_2_4)
      let liststellaident = try buildStellaIdentTokenList(ctx.p_2_6)
      let listparamdecl = try buildParamDeclList(ctx.p_2_9)
      let returntype = try buildReturnType(ctx.p_2_11)
      let throwtype = try buildThrowType(ctx.p_2_12)
      let listdecl = try buildDeclList(ctx.p_2_14)
      let expr = try buildExpr(ctx.p_2_16)
      return .declFunGeneric(listannotation, stellaident, liststellaident, listparamdecl, returntype, throwtype, listdecl, expr)
    case let ctx as StellaParser.DeclTypeAliasContext:
      let stellaident = try buildStellaIdentToken(ctx.p_3_2)
      let type_ = try buildType(ctx.p_3_4)
      return .declTypeAlias(stellaident, type_)
    case let ctx as StellaParser.DeclExceptionTypeContext:
      let type_ = try buildType(ctx.p_4_4)
      return .declExceptionType(type_)
    case let ctx as StellaParser.DeclExceptionVariantContext:
      let stellaident = try buildStellaIdentToken(ctx.p_5_3)
      let type_ = try buildType(ctx.p_5_5)
      return .declExceptionVariant(stellaident, type_)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of DeclContext")
  }
}

func buildDeclList(_ ctx: StellaParser.ListDeclContext) throws -> [Decl] {
  switch ctx {
    case let ctx as StellaParser.ListDecl_EmptyContext:
      return []
    case let ctx as StellaParser.ListDecl_PrependFirstContext:
      let value1 = try buildDeclList(ctx.p_2_1)
      let value2 = try buildDecl(ctx.p_2_2)
      return value1 + [value2]
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListDeclContext")
  }
}

func buildLocalDecl(_ ctx: StellaParser.LocalDeclContext) throws -> LocalDecl {
  switch ctx {
    case let ctx as StellaParser.ALocalDeclContext:
      let decl = try buildDecl(ctx.p_1_1)
      return .aLocalDecl(decl)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of LocalDeclContext")
  }
}

func buildLocalDeclList(_ ctx: StellaParser.ListLocalDeclContext) throws -> [LocalDecl] {
  switch ctx {
    case let ctx as StellaParser.ListLocalDecl_EmptyContext:
      return []
    case let ctx as StellaParser.ListLocalDecl_PrependFirstContext:
      let value1 = try buildLocalDeclList(ctx.p_2_1)
      let value2 = try buildLocalDecl(ctx.p_2_2)
      return value1 + [value2]
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListLocalDeclContext")
  }
}

func buildAnnotation(_ ctx: StellaParser.AnnotationContext) throws -> Annotation {
  switch ctx {
    case let ctx as StellaParser.InlineAnnotationContext:
      return .inlineAnnotation
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of AnnotationContext")
  }
}

func buildAnnotationList(_ ctx: StellaParser.ListAnnotationContext) throws -> [Annotation] {
  switch ctx {
    case let ctx as StellaParser.ListAnnotation_EmptyContext:
      return []
    case let ctx as StellaParser.ListAnnotation_PrependFirstContext:
      let value1 = try buildAnnotationList(ctx.p_2_1)
      let value2 = try buildAnnotation(ctx.p_2_2)
      return value1 + [value2]
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListAnnotationContext")
  }
}

func buildParamDecl(_ ctx: StellaParser.ParamDeclContext) throws -> ParamDecl {
  switch ctx {
    case let ctx as StellaParser.AParamDeclContext:
      let stellaident = try buildStellaIdentToken(ctx.p_1_1)
      let type_ = try buildType(ctx.p_1_3)
      return .aParamDecl(stellaident, type_)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ParamDeclContext")
  }
}

func buildParamDeclList(_ ctx: StellaParser.ListParamDeclContext) throws -> [ParamDecl] {
  switch ctx {
    case let ctx as StellaParser.ListParamDecl_EmptyContext:
      return []
    case let ctx as StellaParser.ListParamDecl_AppendLastContext:
      let data = try buildParamDecl(ctx.p_2_1)
    return [data]
    case let ctx as StellaParser.ListParamDecl_PrependFirstContext:
      let value1 = try buildParamDecl(ctx.p_3_1)
      let value2 = try buildParamDeclList(ctx.p_3_3)
      return [value1] + value2
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListParamDeclContext")
  }
}

func buildReturnType(_ ctx: StellaParser.ReturnTypeContext) throws -> ReturnType {
  switch ctx {
    case let ctx as StellaParser.NoReturnTypeContext:
      return .noReturnType
    case let ctx as StellaParser.SomeReturnTypeContext:
      let type_ = try buildType(ctx.p_2_2)
      return .someReturnType(type_)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ReturnTypeContext")
  }
}

func buildThrowType(_ ctx: StellaParser.ThrowTypeContext) throws -> ThrowType {
  switch ctx {
    case let ctx as StellaParser.NoThrowTypeContext:
      return .noThrowType
    case let ctx as StellaParser.SomeThrowTypeContext:
      let listtype = try buildType9List(ctx.p_2_2)
      return .someThrowType(listtype)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ThrowTypeContext")
  }
}

func buildType9(_ ctx: StellaParser.Type9Context) throws -> Type_ {
  switch ctx {
    case let ctx as StellaParser.Coercion_Type9_1Context:
      return try buildType(ctx.p_1_1)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of TypeContext")
  }
}

func buildType9List(_ ctx: StellaParser.ListType9Context) throws -> [Type_] {
  switch ctx {
    case let ctx as StellaParser.ListType9_AppendLastContext:
      let data = try buildType9(ctx.p_1_1)
    return [data]
    case let ctx as StellaParser.ListType9_PrependFirstContext:
      let value1 = try buildType9(ctx.p_2_1)
      let value2 = try buildType9List(ctx.p_2_3)
      return [value1] + value2
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListTypeContext")
  }
}

func buildMatchCase(_ ctx: StellaParser.MatchCaseContext) throws -> MatchCase {
  switch ctx {
    case let ctx as StellaParser.AMatchCaseContext:
      let pattern = try buildPattern(ctx.p_1_1)
      let expr = try buildExpr(ctx.p_1_3)
      return .aMatchCase(pattern, expr)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of MatchCaseContext")
  }
}

func buildMatchCaseList(_ ctx: StellaParser.ListMatchCaseContext) throws -> [MatchCase] {
  switch ctx {
    case let ctx as StellaParser.ListMatchCase_EmptyContext:
      return []
    case let ctx as StellaParser.ListMatchCase_AppendLastContext:
      let data = try buildMatchCase(ctx.p_2_1)
    return [data]
    case let ctx as StellaParser.ListMatchCase_PrependFirstContext:
      let value1 = try buildMatchCase(ctx.p_3_1)
      let value2 = try buildMatchCaseList(ctx.p_3_3)
      return [value1] + value2
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListMatchCaseContext")
  }
}

func buildOptionalTyping(_ ctx: StellaParser.OptionalTypingContext) throws -> OptionalTyping {
  switch ctx {
    case let ctx as StellaParser.NoTypingContext:
      return .noTyping
    case let ctx as StellaParser.SomeTypingContext:
      let type_ = try buildType(ctx.p_2_2)
      return .someTyping(type_)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of OptionalTypingContext")
  }
}

func buildPatternData(_ ctx: StellaParser.PatternDataContext) throws -> PatternData {
  switch ctx {
    case let ctx as StellaParser.NoPatternDataContext:
      return .noPatternData
    case let ctx as StellaParser.SomePatternDataContext:
      let pattern = try buildPattern(ctx.p_2_2)
      return .somePatternData(pattern)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of PatternDataContext")
  }
}

func buildExprData(_ ctx: StellaParser.ExprDataContext) throws -> ExprData {
  switch ctx {
    case let ctx as StellaParser.NoExprDataContext:
      return .noExprData
    case let ctx as StellaParser.SomeExprDataContext:
      let expr = try buildExpr(ctx.p_2_2)
      return .someExprData(expr)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ExprDataContext")
  }
}

func buildPattern(_ ctx: StellaParser.PatternContext) throws -> Pattern {
  switch ctx {
    case let ctx as StellaParser.PatternVariantContext:
      let stellaident = try buildStellaIdentToken(ctx.p_1_2)
      let patterndata = try buildPatternData(ctx.p_1_3)
      return .patternVariant(stellaident, patterndata)
    case let ctx as StellaParser.PatternInlContext:
      let pattern = try buildPattern(ctx.p_2_3)
      return .patternInl(pattern)
    case let ctx as StellaParser.PatternInrContext:
      let pattern = try buildPattern(ctx.p_3_3)
      return .patternInr(pattern)
    case let ctx as StellaParser.PatternTupleContext:
      let listpattern = try buildPatternList(ctx.p_4_2)
      return .patternTuple(listpattern)
    case let ctx as StellaParser.PatternRecordContext:
      let listlabelledpattern = try buildLabelledPatternList(ctx.p_5_2)
      return .patternRecord(listlabelledpattern)
    case let ctx as StellaParser.PatternListContext:
      let listpattern = try buildPatternList(ctx.p_6_2)
      return .patternList(listpattern)
    case let ctx as StellaParser.PatternConsContext:
      let pattern1 = try buildPattern(ctx.p_7_2)
      let pattern2 = try buildPattern(ctx.p_7_4)
      return .patternCons(pattern1, pattern2)
    case let ctx as StellaParser.PatternFalseContext:
      return .patternFalse
    case let ctx as StellaParser.PatternTrueContext:
      return .patternTrue
    case let ctx as StellaParser.PatternUnitContext:
      return .patternUnit
    case let ctx as StellaParser.PatternIntContext:
      let integer = try buildIntegerToken(ctx.p_11_1)
      return .patternInt(integer)
    case let ctx as StellaParser.PatternSuccContext:
      let pattern = try buildPattern(ctx.p_12_3)
      return .patternSucc(pattern)
    case let ctx as StellaParser.PatternVarContext:
      let stellaident = try buildStellaIdentToken(ctx.p_13_1)
      return .patternVar(stellaident)
    case let ctx as StellaParser.Coercion_Pattern_14Context:
      return try buildPattern(ctx.p_14_2)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of PatternContext")
  }
}

func buildPatternList(_ ctx: StellaParser.ListPatternContext) throws -> [Pattern] {
  switch ctx {
    case let ctx as StellaParser.ListPattern_EmptyContext:
      return []
    case let ctx as StellaParser.ListPattern_AppendLastContext:
      let data = try buildPattern(ctx.p_2_1)
    return [data]
    case let ctx as StellaParser.ListPattern_PrependFirstContext:
      let value1 = try buildPattern(ctx.p_3_1)
      let value2 = try buildPatternList(ctx.p_3_3)
      return [value1] + value2
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListPatternContext")
  }
}

func buildLabelledPattern(_ ctx: StellaParser.LabelledPatternContext) throws -> LabelledPattern {
  switch ctx {
    case let ctx as StellaParser.ALabelledPatternContext:
      let stellaident = try buildStellaIdentToken(ctx.p_1_1)
      let pattern = try buildPattern(ctx.p_1_3)
      return .aLabelledPattern(stellaident, pattern)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of LabelledPatternContext")
  }
}

func buildLabelledPatternList(_ ctx: StellaParser.ListLabelledPatternContext) throws -> [LabelledPattern] {
  switch ctx {
    case let ctx as StellaParser.ListLabelledPattern_AppendLastContext:
      let data = try buildLabelledPattern(ctx.p_1_1)
    return [data]
    case let ctx as StellaParser.ListLabelledPattern_PrependFirstContext:
      let value1 = try buildLabelledPattern(ctx.p_2_1)
      let value2 = try buildLabelledPatternList(ctx.p_2_3)
      return [value1] + value2
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListLabelledPatternContext")
  }
}

func buildBinding(_ ctx: StellaParser.BindingContext) throws -> Binding {
  switch ctx {
    case let ctx as StellaParser.ABindingContext:
      let stellaident = try buildStellaIdentToken(ctx.p_1_1)
      let expr = try buildExpr(ctx.p_1_3)
      return .aBinding(stellaident, expr)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of BindingContext")
  }
}

func buildBindingList(_ ctx: StellaParser.ListBindingContext) throws -> [Binding] {
  switch ctx {
    case let ctx as StellaParser.ListBinding_AppendLastContext:
      let data = try buildBinding(ctx.p_1_1)
    return [data]
    case let ctx as StellaParser.ListBinding_PrependFirstContext:
      let value1 = try buildBinding(ctx.p_2_1)
      let value2 = try buildBindingList(ctx.p_2_3)
      return [value1] + value2
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListBindingContext")
  }
}

func buildExpr(_ ctx: StellaParser.ExprContext) throws -> Expr {
  switch ctx {
    case let ctx as StellaParser.SequenceContext:
      let expr1 = try buildExpr1(ctx.p_1_1)
      let expr2 = try buildExpr(ctx.p_1_3)
      return .sequence(expr1, expr2)
    case let ctx as StellaParser.Coercion_Expr_2Context:
      return try buildExpr1(ctx.p_2_1)
    case let ctx as StellaParser.LetContext:
      let listpatternbinding = try buildPatternBindingList(ctx.p_3_2)
      let expr = try buildExpr(ctx.p_3_4)
      return .let(listpatternbinding, expr)
    case let ctx as StellaParser.LetRecContext:
      let listpatternbinding = try buildPatternBindingList(ctx.p_4_2)
      let expr = try buildExpr(ctx.p_4_4)
      return .letRec(listpatternbinding, expr)
    case let ctx as StellaParser.TypeAbstractionContext:
      let liststellaident = try buildStellaIdentTokenList(ctx.p_5_3)
      let expr = try buildExpr(ctx.p_5_5)
      return .typeAbstraction(liststellaident, expr)
    case let ctx as StellaParser.Coercion_Expr_6Context:
      return try buildExpr1(ctx.p_6_1)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ExprContext")
  }
}

func buildExprList(_ ctx: StellaParser.ListExprContext) throws -> [Expr] {
  switch ctx {
    case let ctx as StellaParser.ListExpr_EmptyContext:
      return []
    case let ctx as StellaParser.ListExpr_AppendLastContext:
      let data = try buildExpr(ctx.p_2_1)
    return [data]
    case let ctx as StellaParser.ListExpr_PrependFirstContext:
      let value1 = try buildExpr(ctx.p_3_1)
      let value2 = try buildExprList(ctx.p_3_3)
      return [value1] + value2
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListExprContext")
  }
}

func buildExpr1(_ ctx: StellaParser.Expr1Context) throws -> Expr {
  switch ctx {
    case let ctx as StellaParser.AssignContext:
      let expr1 = try buildExpr2(ctx.p_1_1)
      let expr2 = try buildExpr1(ctx.p_1_3)
      return .assign(expr1, expr2)
    case let ctx as StellaParser.IfContext:
      let expr1 = try buildExpr1(ctx.p_2_2)
      let expr2 = try buildExpr1(ctx.p_2_4)
      let expr3 = try buildExpr1(ctx.p_2_6)
      return .if(expr1, expr2, expr3)
    case let ctx as StellaParser.Coercion_Expr1_3Context:
      return try buildExpr2(ctx.p_3_1)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ExprContext")
  }
}

func buildPatternBinding(_ ctx: StellaParser.PatternBindingContext) throws -> PatternBinding {
  switch ctx {
    case let ctx as StellaParser.APatternBindingContext:
      let pattern = try buildPattern(ctx.p_1_1)
      let expr = try buildExpr(ctx.p_1_3)
      return .aPatternBinding(pattern, expr)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of PatternBindingContext")
  }
}

func buildPatternBindingList(_ ctx: StellaParser.ListPatternBindingContext) throws -> [PatternBinding] {
  switch ctx {
    case let ctx as StellaParser.ListPatternBinding_AppendLastContext:
      let data = try buildPatternBinding(ctx.p_1_1)
    return [data]
    case let ctx as StellaParser.ListPatternBinding_PrependFirstContext:
      let value1 = try buildPatternBinding(ctx.p_2_1)
      let value2 = try buildPatternBindingList(ctx.p_2_3)
      return [value1] + value2
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListPatternBindingContext")
  }
}

func buildExpr2(_ ctx: StellaParser.Expr2Context) throws -> Expr {
  switch ctx {
    case let ctx as StellaParser.LessThanContext:
      let expr1 = try buildExpr3(ctx.p_1_1)
      let expr2 = try buildExpr3(ctx.p_1_3)
      return .lessThan(expr1, expr2)
    case let ctx as StellaParser.LessThanOrEqualContext:
      let expr1 = try buildExpr3(ctx.p_2_1)
      let expr2 = try buildExpr3(ctx.p_2_3)
      return .lessThanOrEqual(expr1, expr2)
    case let ctx as StellaParser.GreaterThanContext:
      let expr1 = try buildExpr3(ctx.p_3_1)
      let expr2 = try buildExpr3(ctx.p_3_3)
      return .greaterThan(expr1, expr2)
    case let ctx as StellaParser.GreaterThanOrEqualContext:
      let expr1 = try buildExpr3(ctx.p_4_1)
      let expr2 = try buildExpr3(ctx.p_4_3)
      return .greaterThanOrEqual(expr1, expr2)
    case let ctx as StellaParser.EqualContext:
      let expr1 = try buildExpr3(ctx.p_5_1)
      let expr2 = try buildExpr3(ctx.p_5_3)
      return .equal(expr1, expr2)
    case let ctx as StellaParser.NotEqualContext:
      let expr1 = try buildExpr3(ctx.p_6_1)
      let expr2 = try buildExpr3(ctx.p_6_3)
      return .notEqual(expr1, expr2)
    case let ctx as StellaParser.Coercion_Expr2_7Context:
      return try buildExpr3(ctx.p_7_1)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ExprContext")
  }
}

func buildExpr2List(_ ctx: StellaParser.ListExpr2Context) throws -> [Expr] {
  switch ctx {
    case let ctx as StellaParser.ListExpr2_AppendLastContext:
      let data = try buildExpr2(ctx.p_1_1)
    return [data]
    case let ctx as StellaParser.ListExpr2_PrependFirstContext:
      let value1 = try buildExpr2(ctx.p_2_1)
      let value2 = try buildExpr2List(ctx.p_2_3)
      return [value1] + value2
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListExprContext")
  }
}

func buildExpr3(_ ctx: StellaParser.Expr3Context) throws -> Expr {
  switch ctx {
    case let ctx as StellaParser.TypeAscContext:
      let expr = try buildExpr3(ctx.p_1_1)
      let type_ = try buildType2(ctx.p_1_3)
      return .typeAsc(expr, type_)
    case let ctx as StellaParser.TypeCastContext:
      let expr = try buildExpr3(ctx.p_2_1)
      let type_ = try buildType2(ctx.p_2_4)
      return .typeCast(expr, type_)
    case let ctx as StellaParser.AbstractionContext:
      let listparamdecl = try buildParamDeclList(ctx.p_3_3)
      let expr = try buildExpr(ctx.p_3_7)
      return .abstraction(listparamdecl, expr)
    case let ctx as StellaParser.VariantContext:
      let stellaident = try buildStellaIdentToken(ctx.p_4_2)
      let exprdata = try buildExprData(ctx.p_4_3)
      return .variant(stellaident, exprdata)
    case let ctx as StellaParser.MatchContext:
      let expr = try buildExpr2(ctx.p_5_2)
      let listmatchcase = try buildMatchCaseList(ctx.p_5_4)
      return .match(expr, listmatchcase)
    case let ctx as StellaParser.ListContext:
      let listexpr = try buildExprList(ctx.p_6_2)
      return .list(listexpr)
    case let ctx as StellaParser.AddContext:
      let expr1 = try buildExpr3(ctx.p_7_1)
      let expr2 = try buildExpr4(ctx.p_7_3)
      return .add(expr1, expr2)
    case let ctx as StellaParser.SubtractContext:
      let expr1 = try buildExpr3(ctx.p_8_1)
      let expr2 = try buildExpr4(ctx.p_8_3)
      return .subtract(expr1, expr2)
    case let ctx as StellaParser.LogicOrContext:
      let expr1 = try buildExpr3(ctx.p_9_1)
      let expr2 = try buildExpr4(ctx.p_9_3)
      return .logicOr(expr1, expr2)
    case let ctx as StellaParser.Coercion_Expr3_10Context:
      return try buildExpr4(ctx.p_10_1)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ExprContext")
  }
}

func buildExpr4(_ ctx: StellaParser.Expr4Context) throws -> Expr {
  switch ctx {
    case let ctx as StellaParser.MultiplyContext:
      let expr1 = try buildExpr4(ctx.p_1_1)
      let expr2 = try buildExpr5(ctx.p_1_3)
      return .multiply(expr1, expr2)
    case let ctx as StellaParser.DivideContext:
      let expr1 = try buildExpr4(ctx.p_2_1)
      let expr2 = try buildExpr5(ctx.p_2_3)
      return .divide(expr1, expr2)
    case let ctx as StellaParser.LogicAndContext:
      let expr1 = try buildExpr4(ctx.p_3_1)
      let expr2 = try buildExpr5(ctx.p_3_3)
      return .logicAnd(expr1, expr2)
    case let ctx as StellaParser.Coercion_Expr4_4Context:
      return try buildExpr5(ctx.p_4_1)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ExprContext")
  }
}

func buildExpr5(_ ctx: StellaParser.Expr5Context) throws -> Expr {
  switch ctx {
    case let ctx as StellaParser.RefContext:
      let expr = try buildExpr5(ctx.p_1_3)
      return .ref(expr)
    case let ctx as StellaParser.DerefContext:
      let expr = try buildExpr5(ctx.p_2_2)
      return .deref(expr)
    case let ctx as StellaParser.Coercion_Expr5_3Context:
      return try buildExpr6(ctx.p_3_1)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ExprContext")
  }
}

func buildExpr6(_ ctx: StellaParser.Expr6Context) throws -> Expr {
  switch ctx {
    case let ctx as StellaParser.ApplicationContext:
      let expr = try buildExpr6(ctx.p_1_1)
      let listexpr = try buildExprList(ctx.p_1_3)
      return .application(expr, listexpr)
    case let ctx as StellaParser.TypeApplicationContext:
      let expr = try buildExpr6(ctx.p_2_1)
      let listtype = try buildTypeList(ctx.p_2_3)
      return .typeApplication(expr, listtype)
    case let ctx as StellaParser.DotRecordContext:
      let expr = try buildExpr6(ctx.p_3_1)
      let stellaident = try buildStellaIdentToken(ctx.p_3_3)
      return .dotRecord(expr, stellaident)
    case let ctx as StellaParser.DotTupleContext:
      let expr = try buildExpr6(ctx.p_4_1)
      let integer = try buildIntegerToken(ctx.p_4_3)
      return .dotTuple(expr, integer)
    case let ctx as StellaParser.TupleContext:
      let listexpr = try buildExprList(ctx.p_5_2)
      return .tuple(listexpr)
    case let ctx as StellaParser.RecordContext:
      let listbinding = try buildBindingList(ctx.p_6_2)
      return .record(listbinding)
    case let ctx as StellaParser.ConsListContext:
      let expr1 = try buildExpr(ctx.p_7_3)
      let expr2 = try buildExpr(ctx.p_7_5)
      return .consList(expr1, expr2)
    case let ctx as StellaParser.HeadContext:
      let expr = try buildExpr(ctx.p_8_3)
      return .head(expr)
    case let ctx as StellaParser.IsEmptyContext:
      let expr = try buildExpr(ctx.p_9_3)
      return .isEmpty(expr)
    case let ctx as StellaParser.TailContext:
      let expr = try buildExpr(ctx.p_10_3)
      return .tail(expr)
    case let ctx as StellaParser.PanicContext:
      return .panic
    case let ctx as StellaParser.ThrowContext:
      let expr = try buildExpr(ctx.p_12_3)
      return .throw(expr)
    case let ctx as StellaParser.TryCatchContext:
      let expr1 = try buildExpr(ctx.p_13_3)
      let pattern = try buildPattern(ctx.p_13_7)
      let expr2 = try buildExpr(ctx.p_13_9)
      return .tryCatch(expr1, pattern, expr2)
    case let ctx as StellaParser.TryWithContext:
      let expr1 = try buildExpr(ctx.p_14_3)
      let expr2 = try buildExpr(ctx.p_14_7)
      return .tryWith(expr1, expr2)
    case let ctx as StellaParser.InlContext:
      let expr = try buildExpr(ctx.p_15_3)
      return .inl(expr)
    case let ctx as StellaParser.InrContext:
      let expr = try buildExpr(ctx.p_16_3)
      return .inr(expr)
    case let ctx as StellaParser.SuccContext:
      let expr = try buildExpr(ctx.p_17_3)
      return .succ(expr)
    case let ctx as StellaParser.LogicNotContext:
      let expr = try buildExpr(ctx.p_18_3)
      return .logicNot(expr)
    case let ctx as StellaParser.PredContext:
      let expr = try buildExpr(ctx.p_19_3)
      return .pred(expr)
    case let ctx as StellaParser.IsZeroContext:
      let expr = try buildExpr(ctx.p_20_3)
      return .isZero(expr)
    case let ctx as StellaParser.FixContext:
      let expr = try buildExpr(ctx.p_21_3)
      return .fix(expr)
    case let ctx as StellaParser.NatRecContext:
      let expr1 = try buildExpr(ctx.p_22_3)
      let expr2 = try buildExpr(ctx.p_22_5)
      let expr3 = try buildExpr(ctx.p_22_7)
      return .natRec(expr1, expr2, expr3)
    case let ctx as StellaParser.FoldContext:
      let type_ = try buildType(ctx.p_23_3)
      let expr = try buildExpr7(ctx.p_23_5)
      return .fold(type_, expr)
    case let ctx as StellaParser.UnfoldContext:
      let type_ = try buildType(ctx.p_24_3)
      let expr = try buildExpr7(ctx.p_24_5)
      return .unfold(type_, expr)
    case let ctx as StellaParser.Coercion_Expr6_25Context:
      return try buildExpr7(ctx.p_25_1)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ExprContext")
  }
}

func buildExpr7(_ ctx: StellaParser.Expr7Context) throws -> Expr {
  switch ctx {
    case let ctx as StellaParser.ConstTrueContext:
      return .constTrue
    case let ctx as StellaParser.ConstFalseContext:
      return .constFalse
    case let ctx as StellaParser.ConstUnitContext:
      return .constUnit
    case let ctx as StellaParser.ConstIntContext:
      let integer = try buildIntegerToken(ctx.p_4_1)
      return .constInt(integer)
    case let ctx as StellaParser.ConstDoubleContext:
      let double = try buildDoubleToken(ctx.p_5_1)
      return .constDouble(double)
    case let ctx as StellaParser.ConstMemoryContext:
      let memoryaddress = try buildMemoryAddressToken(ctx.p_6_1)
      return .constMemory(memoryaddress)
    case let ctx as StellaParser.VarContext:
      let stellaident = try buildStellaIdentToken(ctx.p_7_1)
      return .var(stellaident)
    case let ctx as StellaParser.Coercion_Expr7_8Context:
      return try buildExpr(ctx.p_8_2)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ExprContext")
  }
}

func buildType(_ ctx: StellaParser.TypeContext) throws -> Type_ {
  switch ctx {
    case let ctx as StellaParser.TypeFunContext:
      let listtype = try buildTypeList(ctx.p_1_3)
      let type_ = try buildType(ctx.p_1_6)
      return .typeFun(listtype, type_)
    case let ctx as StellaParser.TypeForAllContext:
      let liststellaident = try buildStellaIdentTokenList(ctx.p_2_2)
      let type_ = try buildType(ctx.p_2_4)
      return .typeForAll(liststellaident, type_)
    case let ctx as StellaParser.TypeRecContext:
      let stellaident = try buildStellaIdentToken(ctx.p_3_2)
      let type_ = try buildType(ctx.p_3_4)
      return .typeRec(stellaident, type_)
    case let ctx as StellaParser.Coercion_Type_4Context:
      return try buildType1(ctx.p_4_1)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of TypeContext")
  }
}

func buildType1(_ ctx: StellaParser.Type1Context) throws -> Type_ {
  switch ctx {
    case let ctx as StellaParser.TypeSumContext:
      let type1 = try buildType2(ctx.p_1_1)
      let type2 = try buildType2(ctx.p_1_3)
      return .typeSum(type1, type2)
    case let ctx as StellaParser.Coercion_Type1_2Context:
      return try buildType2(ctx.p_2_1)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of TypeContext")
  }
}

func buildType2(_ ctx: StellaParser.Type2Context) throws -> Type_ {
  switch ctx {
    case let ctx as StellaParser.TypeTupleContext:
      let listtype = try buildTypeList(ctx.p_1_2)
      return .typeTuple(listtype)
    case let ctx as StellaParser.TypeRecordContext:
      let listrecordfieldtype = try buildRecordFieldTypeList(ctx.p_2_2)
      return .typeRecord(listrecordfieldtype)
    case let ctx as StellaParser.TypeVariantContext:
      let listvariantfieldtype = try buildVariantFieldTypeList(ctx.p_3_2)
      return .typeVariant(listvariantfieldtype)
    case let ctx as StellaParser.TypeListContext:
      let type_ = try buildType(ctx.p_4_2)
      return .typeList(type_)
    case let ctx as StellaParser.Coercion_Type2_5Context:
      return try buildType3(ctx.p_5_1)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of TypeContext")
  }
}

func buildType3(_ ctx: StellaParser.Type3Context) throws -> Type_ {
  switch ctx {
    case let ctx as StellaParser.TypeBoolContext:
      return .typeBool
    case let ctx as StellaParser.TypeNatContext:
      return .typeNat
    case let ctx as StellaParser.TypeUnitContext:
      return .typeUnit
    case let ctx as StellaParser.TypeTopContext:
      return .typeTop
    case let ctx as StellaParser.TypeBottomContext:
      return .typeBottom
    case let ctx as StellaParser.TypeRefContext:
      let type_ = try buildType2(ctx.p_6_2)
      return .typeRef(type_)
    case let ctx as StellaParser.TypeVarContext:
      let stellaident = try buildStellaIdentToken(ctx.p_7_1)
      return .typeVar(stellaident)
    case let ctx as StellaParser.Coercion_Type3_8Context:
      return try buildType(ctx.p_8_2)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of TypeContext")
  }
}

func buildTypeList(_ ctx: StellaParser.ListTypeContext) throws -> [Type_] {
  switch ctx {
    case let ctx as StellaParser.ListType_EmptyContext:
      return []
    case let ctx as StellaParser.ListType_AppendLastContext:
      let data = try buildType(ctx.p_2_1)
    return [data]
    case let ctx as StellaParser.ListType_PrependFirstContext:
      let value1 = try buildType(ctx.p_3_1)
      let value2 = try buildTypeList(ctx.p_3_3)
      return [value1] + value2
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListTypeContext")
  }
}

func buildVariantFieldType(_ ctx: StellaParser.VariantFieldTypeContext) throws -> VariantFieldType {
  switch ctx {
    case let ctx as StellaParser.AVariantFieldTypeContext:
      let stellaident = try buildStellaIdentToken(ctx.p_1_1)
      let optionaltyping = try buildOptionalTyping(ctx.p_1_2)
      return .aVariantFieldType(stellaident, optionaltyping)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of VariantFieldTypeContext")
  }
}

func buildVariantFieldTypeList(_ ctx: StellaParser.ListVariantFieldTypeContext) throws -> [VariantFieldType] {
  switch ctx {
    case let ctx as StellaParser.ListVariantFieldType_EmptyContext:
      return []
    case let ctx as StellaParser.ListVariantFieldType_AppendLastContext:
      let data = try buildVariantFieldType(ctx.p_2_1)
    return [data]
    case let ctx as StellaParser.ListVariantFieldType_PrependFirstContext:
      let value1 = try buildVariantFieldType(ctx.p_3_1)
      let value2 = try buildVariantFieldTypeList(ctx.p_3_3)
      return [value1] + value2
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListVariantFieldTypeContext")
  }
}

func buildRecordFieldType(_ ctx: StellaParser.RecordFieldTypeContext) throws -> RecordFieldType {
  switch ctx {
    case let ctx as StellaParser.ARecordFieldTypeContext:
      let stellaident = try buildStellaIdentToken(ctx.p_1_1)
      let type_ = try buildType(ctx.p_1_3)
      return .aRecordFieldType(stellaident, type_)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of RecordFieldTypeContext")
  }
}

func buildRecordFieldTypeList(_ ctx: StellaParser.ListRecordFieldTypeContext) throws -> [RecordFieldType] {
  switch ctx {
    case let ctx as StellaParser.ListRecordFieldType_AppendLastContext:
      let data = try buildRecordFieldType(ctx.p_1_1)
    return [data]
    case let ctx as StellaParser.ListRecordFieldType_PrependFirstContext:
      let value1 = try buildRecordFieldType(ctx.p_2_1)
      let value2 = try buildRecordFieldTypeList(ctx.p_2_3)
      return [value1] + value2
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of ListRecordFieldTypeContext")
  }
}

func buildTyping(_ ctx: StellaParser.TypingContext) throws -> Typing {
  switch ctx {
    case let ctx as StellaParser.ATypingContext:
      let expr = try buildExpr(ctx.p_1_1)
      let type_ = try buildType(ctx.p_1_3)
      return .aTyping(expr, type_)
    default:
      throw BuildError.UnexpectedParseContext("Error: ctx should be an instance of TypingContext")
  }
}
